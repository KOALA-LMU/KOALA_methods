
Dieses Dokument hat zwei Abschnitte:
1) Häufige Fehlermeldungen
2) Anleitung zum erstmaligen Aufsetzen von shiny server


----------------------------------------------------
1) Häufige Fehlermeldungen:
- Beim Ausführen von shiny am server kommt die Fehlermeldung
  'cannot open the connection' und die shiny App öffnet sich erst gar nicht
  -> Problem: Auf Linux müssen dem Benutzer, unter welchem die shiny App
     für die Servernutzung ausgeführt wird, alle Rechte für die auszuführenden
     shiny-Dateien zugewiesen sein, sonst kann er die App nicht starten
     (tritt z.B. auch auf, wenn man die coalishin-package-Dateien neu
      von GitHub updatet, s.d. die vorher zugewiesenen Rechte dann auf einmal
      wieder weg sind)
  -> Lösung: Rechte zuweisen: 'sudo chmod -R 777 coalishin/'
             (Dadurch werden allen Benutzern(?) alle Rechte für alle Dateien im
              coalishin-Ordner zugewiesen)
  -> Überprüfung: Im Terminal kann man per 'ls -l' in einem Ordner überprüfen, welche
     Rechte für alle Dateien zugewiesen sind -> Info steht in erster Spalte. Z.B. 'rwx'
     bedeutet, dass man read (Lese-), write (Schreib-) und x (Ausführungs-)Rechte für eine Datei hat
2) Nach dem Neuaufsetzen des Servers lässt sich nicht per SSH darauf zugreifen.
   -> Falls der Standard-SSH-Port 22 nicht angezeigt wird mit 'sudo ufw status', dann muss man
      diesen erst hinzufügen per 'sudo ufw allow 22', sodass SSH-Verbindungen
      nicht mehr von der Server-Firewall geblockt werden.


----------------------------------------------------
Allg. nützliche Befehle bzgl. shiny-server:
1) Falls man Shiny-Server restarten will (wenn man z.B. Einstellungen an der shiny-server.config-Datei verändert hat):
- Ubuntu 15.04+: sudo systemctl restart shiny-server
- Ubuntu 14: sudo restart shiny-server
- Wichtig: Wenn man https per unterer Methode mittels Apache aufgesetzt hat muss man teilweise auch Apache restarten, damit die Seite problemlos erreichbar ist: sudo service apache2 restart


----------------------------------------------------
0) Allgemeine Anleitung zum Aufsetzen von Shiny Server:
http://docs.rstudio.com/shiny-server/#ubuntu-12.04

1) Aktuellen CRAN Mirror im System aufsetzen, damit aktuellste R-Version gefunden wird:
https://cran.rstudio.com/bin/linux/ubuntu/README.html#installation
Beachten:
- die Befehlszeile mit 'trusty/' hinten verwenden!
- Da http(s) verwendet wird muss ein Schlüssel per Hand im System hinterlegt werden: siehe obige Seite unter 'Secure APT'
- Zum bearbeiten der ect/apt/sources.list-Datei am besten 'sudo nano ect/apt/sources.list' im Terminal verwenden. Bei den anderen Methoden (z.B. mit gedit) ist nicht gesichert, dass man mit den Zugriffsrechten die Datei überschreiben kann 

2) Aktuelle R-Version installieren:
sudo apt-get install r-base

3) Pakete installieren:
Wichtig: Alle Pakete müssen für den Nutzer installiert sein, von welchem aus die shiny-server-Instanzen gestartet werden (siehe Datei 'etc/shiny-server.conf')!
         -> Entweder von diesem Nutzerprofil aus die Pakete installieren, oder mit 'sudo su - -c "R -e ..."' (s.u.) die Pakete als root, d.h. für alle Benutzer, installieren
3.1) shiny: sudo su - -c "R -e \"install.packages('shiny', repos='http://cran.rstudio.com/')\""
3.1.2) shinydashboard: sudo su - -c "R -e \"install.packages('shinydashboard', repos='http://cran.rstudio.com/')\""
3.2) devtools-Paket: sudo su - -c "R -e \"install.packages('devtools', repos='http://cran.rstudio.com/')\""
Dazu muss man vorher noch per Hand ein paar System dependencies installieren:
sudo apt-get install build-essential libcurl4-gnutls-dev libxml2-dev libssl-dev
(siehe https://www.digitalocean.com/community/tutorials/how-to-install-r-packages-using-devtools-on-ubuntu-16-04)
3.3) aktuellste tidyverse-Pakete von GitHub installieren: sudo su - -c "R -e \"devtools::install_github('hadley/tidyverse')\""
Aus unklaren Gründen ist es danach notwendig, einzelne tidyverse-Pakete nochmal upzudaten:
sudo su - -c "R -e \"devtools::install_github('hadley/dplyr')\""
sudo su - -c "R -e \"devtools::install_github('hadley/tidyr')\""
sudo su - -c "R -e \"devtools::install_github('hadley/purrr')\""
3.4) Aktuell nicht genutzt: googledrive-Paket installieren
sudo su - -c "R -e \"devtools::install_github('tidyverse/googledrive')\""
3.5) coalitions und coalishin installieren.
Wichtig: Das repository 'coalishin' auf GitHub ist privat, deshalb braucht man ein Access Token. Ein persönliches Access Token kann man sich holen, wenn man sich auf GitHub.com anmeldet -> Settings -> ganz unten auf 'personal access tokens'.
sudo su - -c "R -e \"devtools::install_github('adibender/coalitions')\""
sudo su - -c "R -e \"devtools::install_github('adibender/coalishin/package', auth_token = '8646457d767fe0adb17d13ef5488d5ae01647a97')\""
3.5.1) Für coalishin ist es vorher noch notwendig, für das Paket 'udunits2' gewisse dependencies per Hand am System zu installieren:
sudo apt-get install libudunits2-dev

4) shiny server installieren
$ sudo apt-get install gdebi-core
$ sudo wget https://download3.rstudio.org/ubuntu-12.04/x86_64/shiny-server-1.5.3.838-amd64.deb
$ sudo gdebi shiny-server-1.5.3.838-amd64.deb
(siehe: https://www.rstudio.com/products/shiny/download-server/)

5) Folgende Sachen in die etc/shiny-server/shiny-server.conf-Datei einfügen:
5.1)
# Do not sanitize errors (i.e. shiny should show the real error message if an error occurs).
# (otherwise you only get very cryptical and general error messages)
sanitize_errors false;

5.2)
Außerdem:
# Prevent shiny server from closing the R process in the background when no user is using the website.
# This reduces the startup time drastically for new users as R doesn't have to be restarted every time and the precalculated workspace doesn't have to be reloaded every time.
app_idle_timeout 0;
Quelle: https://groups.google.com/forum/#!topic/shiny-discuss/oIemsyrNKH4	

5.3)
Den Port in shiny-server.config kann man außerdem von 3838 auf 80 ändern.
Grund: 80 ist der allgemeine Standardport im Web, d.h. dann muss man auf die Webseite nur per koala.stat.uni-muenchen.de zugreifen. Bei nem Port von 3838 würde dieser Link dagegen nicht funktionieren und man bräuchte koala.stat.uni-muenchen.de:3838

5.4)
Um keinen Link zu brauchen wie koala.stat.uni-muenchen.de/coalishin/package/shiny kann man in der config-Datei festsetzen, von welchem Ordner aus die shiny-Dateien (ui.R & server.R) gestartet werden sollen
-> ändere in der .config-Datei 'site_dir /srv/shiny-server/' zu 'site_dir /srv/shiny-server/coalishin/package/shiny/'
-> ab jetzt kann man den Link koala.stat.uni-muenchen.de verwenden

5.5)
Für Fehlermeldungen der Seite (z.B. bei nem allg. Serverfehler oder falls zu viele Nutzer gleichzeitig drauf zugreifen) wollen wir unsere vorbereiteten html-Seiten anzeigen lassen.
Quelle dafür: http://docs.rstudio.com/shiny-server/#custom-templates
-> Füge in der .config-Datei folgenden Block dazu
# Folder for html files that are shown when errors occur
template_dir /srv/shiny-server/coalishin/web_services/shiny_error_templates/;

6) Folge 'Quick Start' Anweisungen von hier: http://docs.rstudio.com/shiny-server/#host-a-directory-of-applications-1

7) coalishin-Verzeichnis aus GitHub in den Ordner srv/shiny-server/ klonen:
sudo git clone http://github.com/adibender/coalishin.git /srv/shiny-server/coalishin

8) data-Ordner per sudo anlegen
sudo mkdir coalishin/data

9) Set up the server as https and not as http (which is the default connection for Shiny Server Open Source):
- A tutorial is given on https://ipub.com/shiny-https/ (called “Link 1” in the following; start from Step 4 down in the step-to-step guide), and some more notes are added here: https://chrisbeeley.net/?p=1077 (“Link 2”)
- Background information: The default port for http is 80, the default port for https is 443.
- Background information II: The solution of the step-to-step guide is to set up an Apache server (on the same server instance as Shiny Server) that listens to port 443 over https and then link to e.g. port 3838 where shiny can be found. The tutorial does this on an AWS server, however it’s also fine to do this on a normal Ubuntu server
- Prerequisities: If shiny-server currently listens to port 80, change it back to 3838 (or any other port apart from 80 and 443). When setting up the Apache server it will initialize both a http connection listening to port 80 (so this shouldn’t be blocked by Shiny Server), and an https connection listening to port 443.
- Follow the guidelines in the tutorials. It should work if you stick with “Link 1” completely and when editing the .conf files in /etc/apache2/sites-enabled/ stick with “Link 2”. Note that when editing the .conf file according to "Link 2", do not use the '/shinyapps' paths, but instead simply write '/' paths at the relevant positions.
- Regarding the installation of an SSL certificate (for a validated secure https connection):
  1) We use the Let's Encrypt service (https://letsencrypt.org/getting-started/)
  2) We obtain our specific certificate from CertBot (https://certbot.eff.org/)
  3) In case of a CertBot installation from scratch it is maybe necessary, to turn of the use of TLS-SNI-01: https://community.letsencrypt.org/t/how-to-stop-using-tls-sni-01-with-certbot/83210
- Finally, we only want connections to work over the apache https connection. So sudo ufw status should only show ports 22 (for SSH connections), 443 (https) and 80 (http that get's redirected to apache https). If more ports are in the list, delete them via sudo ufw delete allow _portnumber_.
- In the end, it could be necessary to restart the server completely. To do so, use the command 'reboot'.
- If it is sometimes necessary to restart the Apache server, one can use 'sudo service apache2 restart'.

10) Automatische Update-Funktion anwerfen
sudo R CMD BATCH coalishin/package/shiny/update_results_everyHour.R & (wichtig ist insb das & am Ende!)
Dabei unbedingt zu beachten:
9.1) Will man die Funktion abbrechen, z.B. um das geupdatete Paket neu zu installieren und die Funktion neu anzuwerfen, so muss man beachten, dass mit obigem 'sudo'-Aufruf der R-Prozess nicht unter dem aktuellen User, sondern unter dem root-User gestartet wird. D.h. z.B., dass der Prozess NICHT mit 'killall -u stablab' gekillt werden kann (wenn stablab der User ist), sondern stattdessen sollte 'sudo pkill R' benutzt werden, was alle laufenden R-Prozesse am Server killt.
Dazu auch hilfreich: Ob eventuell ein 'sudo R CMD BATCH update_results_everyHour.R &'-Befehl einmal nicht richtig beendet wurde wegen obiger Problematik und im Hintergrund weiterläuft kann man überprüfen mit 'ps -ef', was alle laufenden Prozesse aller User am Server anzeigt.
9.2) Beim Ausführen der Funktion wird eine .Rout-Datei vom System angelegt (und eine .log-Datei durch den R-Code). Wenn man die Funktion zwischendurch einmal abbricht und wieder neu starten will (durch Neuausführen des oberen Befehls) dann kann es sein, dass der R-Prozess immer sofort wieder abbricht ohne Fehlermeldung. Dies kann daran liegen, dass man für die .Rout/.log Dateien keine Schreibrechte hat. -> Lösung: Die .Rout und .log Dateien vorher per Hand löschen: sudo rm update_results_everyHour.Rout